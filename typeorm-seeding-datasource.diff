diff --git a/package.json b/package.json
index 1b39a8f..38ba69e 100644
--- a/package.json
+++ b/package.json
@@ -59,7 +59,7 @@
     "sqlite3": "5.0.8",
     "ts-jest": "28.0.4",
     "ts-node": "10.8.1",
-    "typeorm": "0.2.45",
+    "typeorm": "0.3.6",
     "typescript": "4.7.3"
   },
   "dependencies": {
@@ -70,7 +70,7 @@
     "yargs": "17.5.1"
   },
   "peerDependencies": {
-    "typeorm": "^0.2.41"
+    "typeorm": "^0.3.0"
   },
   "resolutions": {
     "mem": ">=4.0.0"
diff --git a/src/connection/ConnectionConfigurationManager.ts b/src/connection/ConnectionConfigurationManager.ts
deleted file mode 100644
index a6f4c44..0000000
--- a/src/connection/ConnectionConfigurationManager.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-import type { ConnectionConfiguration } from '../types'
-
-export class ConnectionConfigurationManager {
-  private static _instance: ConnectionConfigurationManager
-  private _configuration: ConnectionConfiguration
-
-  private constructor() {
-    this._configuration = {
-      connection: 'default',
-    }
-  }
-
-  static getInstance() {
-    if (!ConnectionConfigurationManager._instance) {
-      ConnectionConfigurationManager._instance = new ConnectionConfigurationManager()
-    }
-
-    return ConnectionConfigurationManager._instance
-  }
-
-  get configuration(): ConnectionConfiguration {
-    return this._configuration
-  }
-
-  overrideConfiguration(configuration: Partial<ConnectionConfiguration>) {
-    this._configuration = { ...this._configuration, ...configuration }
-  }
-}
diff --git a/src/connection/configureConnection.ts b/src/connection/configureConnection.ts
deleted file mode 100644
index 1d1c830..0000000
--- a/src/connection/configureConnection.ts
+++ /dev/null
@@ -1,6 +0,0 @@
-import type { ConnectionConfiguration } from '../types'
-import { ConnectionConfigurationManager } from './ConnectionConfigurationManager'
-
-export function configureConnection(options: Partial<ConnectionConfiguration> = {}) {
-  ConnectionConfigurationManager.getInstance().overrideConfiguration(options)
-}
diff --git a/src/connection/fetchConnection.ts b/src/connection/fetchConnection.ts
deleted file mode 100644
index 91f44ec..0000000
--- a/src/connection/fetchConnection.ts
+++ /dev/null
@@ -1,20 +0,0 @@
-import type { Connection } from 'typeorm'
-import { createConnection, getConnection } from 'typeorm'
-import { ConnectionConfigurationManager } from './ConnectionConfigurationManager'
-import { getConnectionOptions } from './getConnectionOptions'
-
-export const fetchConnection = async (): Promise<Connection> => {
-  const { connection: connectionName } = ConnectionConfigurationManager.getInstance().configuration
-
-  const getNewConnection = async (): Promise<Connection> => createConnection(await getConnectionOptions())
-
-  let connection: Connection
-  try {
-    connection = getConnection(connectionName)
-    if (connection.isConnected) return connection
-
-    return getNewConnection()
-  } catch {
-    return getNewConnection()
-  }
-}
diff --git a/src/connection/getConnectionOptions.ts b/src/connection/getConnectionOptions.ts
deleted file mode 100644
index 49fe181..0000000
--- a/src/connection/getConnectionOptions.ts
+++ /dev/null
@@ -1,28 +0,0 @@
-import { ConnectionOptionsReader } from 'typeorm'
-import { DefaultSeederNotDefinedError } from '../errors'
-import type { ConnectionOptions } from '../types'
-import { ConnectionConfigurationManager } from './ConnectionConfigurationManager'
-
-export async function getConnectionOptions(): Promise<ConnectionOptions> {
-  const { root, configName, connection } = ConnectionConfigurationManager.getInstance().configuration
-  const connectionReader = new ConnectionOptionsReader({
-    root,
-    configName,
-  })
-
-  const options = (await connectionReader.get(connection)) as ConnectionOptions
-
-  const seedersFromEnv = process.env.TYPEORM_SEEDING_SEEDERS
-  const defaultSeederFromEnv = process.env.TYPEORM_SEEDING_DEFAULT_SEEDER
-  const defaultSeeder = defaultSeederFromEnv || options.defaultSeeder
-
-  if (!defaultSeeder) {
-    throw new DefaultSeederNotDefinedError()
-  }
-
-  return {
-    ...options,
-    seeders: seedersFromEnv ? [seedersFromEnv] : options.seeders || [],
-    defaultSeeder,
-  }
-}
diff --git a/src/connection/index.ts b/src/connection/index.ts
deleted file mode 100644
index 192b20c..0000000
--- a/src/connection/index.ts
+++ /dev/null
@@ -1,3 +0,0 @@
-export * from './configureConnection'
-export * from './fetchConnection'
-export * from './getConnectionOptions'
diff --git a/src/datasource/DataSourceManager.ts b/src/datasource/DataSourceManager.ts
new file mode 100644
index 0000000..9bf51fa
--- /dev/null
+++ b/src/datasource/DataSourceManager.ts
@@ -0,0 +1,27 @@
+import type { DataSource } from 'typeorm'
+import { DataSourceNotProvidedError } from '../errors/DataSourceNotProvidedError'
+
+export class DataSourceManager {
+  private static _instance: DataSourceManager
+  private _dataSource?: DataSource
+
+  static getInstance() {
+    if (!DataSourceManager._instance) {
+      DataSourceManager._instance = new DataSourceManager()
+    }
+
+    return DataSourceManager._instance
+  }
+
+  get dataSource(): DataSource {
+    if (this._dataSource === undefined) {
+      throw new DataSourceNotProvidedError()
+    }
+
+    return this._dataSource
+  }
+
+  set dataSource(dataSource: DataSource) {
+    this._dataSource = dataSource
+  }
+}
diff --git a/src/datasource/configureDataSource.ts b/src/datasource/configureDataSource.ts
new file mode 100644
index 0000000..a941b57
--- /dev/null
+++ b/src/datasource/configureDataSource.ts
@@ -0,0 +1,6 @@
+import type { DataSource } from 'typeorm'
+import { DataSourceManager } from './DataSourceManager'
+
+export function configureDataSource(dataSource: DataSource) {
+  DataSourceManager.getInstance().dataSource = dataSource
+}
diff --git a/src/datasource/fetchDataSource.ts b/src/datasource/fetchDataSource.ts
new file mode 100644
index 0000000..f98efd8
--- /dev/null
+++ b/src/datasource/fetchDataSource.ts
@@ -0,0 +1,5 @@
+import { DataSourceManager } from './DataSourceManager'
+
+export function fetchDataSource() {
+  return DataSourceManager.getInstance().dataSource
+}
diff --git a/src/datasource/index.ts b/src/datasource/index.ts
new file mode 100644
index 0000000..4d065ec
--- /dev/null
+++ b/src/datasource/index.ts
@@ -0,0 +1,2 @@
+export * from './configureDataSource'
+export * from './fetchDataSource'
diff --git a/src/errors/DataSourceNotProvidedError.ts b/src/errors/DataSourceNotProvidedError.ts
new file mode 100644
index 0000000..908f3de
--- /dev/null
+++ b/src/errors/DataSourceNotProvidedError.ts
@@ -0,0 +1,5 @@
+export class DataSourceNotProvidedError extends Error {
+  constructor() {
+    super(`Data source is not provided.`)
+  }
+}
diff --git a/src/factory.ts b/src/factory.ts
index a697469..34db431 100644
--- a/src/factory.ts
+++ b/src/factory.ts
@@ -1,5 +1,5 @@
 import type { SaveOptions } from 'typeorm'
-import { fetchConnection } from './connection'
+import { fetchDataSource } from './datasource'
 import { InstanceAttribute } from './instanceAttribute'
 import { LazyInstanceAttribute } from './lazyInstanceAttribute'
 import { Subfactory } from './subfactory'
@@ -7,13 +7,13 @@ import type { Constructable, FactorizedAttrs } from './types'
 
 export abstract class Factory<T> {
   protected abstract entity: Constructable<T>
-  protected abstract attrs: FactorizedAttrs<T>
+  protected abstract attrs(): FactorizedAttrs<T>
 
   /**
    * Make a new entity without persisting it
    */
   async make(overrideParams: Partial<FactorizedAttrs<T>> = {}): Promise<T> {
-    const attrs = { ...this.attrs, ...overrideParams }
+    const attrs = { ...this.attrs(), ...overrideParams }
 
     const entity = await this.makeEntity(attrs, false)
     await this.applyLazyAttributes(entity, attrs, false)
@@ -36,12 +36,12 @@ export abstract class Factory<T> {
    * Create a new entity and persist it
    */
   async create(overrideParams: Partial<FactorizedAttrs<T>> = {}, saveOptions?: SaveOptions): Promise<T> {
-    const attrs = { ...this.attrs, ...overrideParams }
+    const attrs = { ...this.attrs(), ...overrideParams }
     const preloadedAttrs = Object.entries(attrs).filter(([, value]) => !(value instanceof LazyInstanceAttribute))
 
     const entity = await this.makeEntity(Object.fromEntries(preloadedAttrs) as FactorizedAttrs<T>, true)
 
-    const em = (await fetchConnection()).createEntityManager()
+    const em = fetchDataSource().createEntityManager()
     const savedEntity = await em.save<T>(entity, saveOptions)
 
     await this.applyLazyAttributes(savedEntity, attrs, true)
diff --git a/src/helpers/index.ts b/src/helpers/index.ts
new file mode 100644
index 0000000..f3b70f9
--- /dev/null
+++ b/src/helpers/index.ts
@@ -0,0 +1 @@
+export * from './useDataSource'
diff --git a/src/helpers/useDataSource.ts b/src/helpers/useDataSource.ts
new file mode 100644
index 0000000..f7690cd
--- /dev/null
+++ b/src/helpers/useDataSource.ts
@@ -0,0 +1,34 @@
+import type { DataSource, DataSourceOptions } from 'typeorm'
+import { configureDataSource } from '../datasource'
+
+export async function useDataSource(dataSource: DataSource): Promise<void>
+export async function useDataSource(dataSource: DataSource, overrideOptions?: Partial<DataSourceOptions>): Promise<void>
+export async function useDataSource(dataSource: DataSource, forceInitialization?: boolean): Promise<void>
+export async function useDataSource(
+  dataSource: DataSource,
+  overrideOptions?: Partial<DataSourceOptions>,
+  forceInitialization?: boolean,
+): Promise<void>
+
+export async function useDataSource(
+  dataSource: DataSource,
+  overrideOptionsOrForceInitialization?: Partial<DataSourceOptions> | boolean,
+  forceInitialization?: boolean,
+): Promise<void> {
+  const overrideOptions =
+    typeof overrideOptionsOrForceInitialization === 'object' ? overrideOptionsOrForceInitialization : undefined
+  const shouldInitilialize =
+    typeof overrideOptionsOrForceInitialization === 'boolean'
+      ? overrideOptionsOrForceInitialization
+      : forceInitialization
+
+  if (overrideOptions) {
+    dataSource.setOptions(overrideOptions)
+  }
+
+  if (shouldInitilialize) {
+    await dataSource.initialize()
+  }
+
+  configureDataSource(dataSource)
+}
diff --git a/src/index.ts b/src/index.ts
index f806716..933139f 100644
--- a/src/index.ts
+++ b/src/index.ts
@@ -1,6 +1,6 @@
-export * from './connection'
 export * from './errors'
 export * from './factory'
+export * from './helpers'
 export * from './instanceAttribute'
 export * from './lazyInstanceAttribute'
 export * from './seeder'
diff --git a/src/useSeeders.ts b/src/useSeeders.ts
index 4231e77..a18c955 100644
--- a/src/useSeeders.ts
+++ b/src/useSeeders.ts
@@ -1,4 +1,4 @@
-import { configureConnection, fetchConnection } from './connection'
+// import { configureConnection, fetchConnection } from './connection'
 import { Seeder } from './seeder'
 import type { ConnectionConfiguration, Constructable } from './types'
 
@@ -12,12 +12,10 @@ export async function useSeeders(
   entrySeeders: Constructable<Seeder> | Constructable<Seeder>[],
   customOptions?: Partial<ConnectionConfiguration>,
 ): Promise<void> {
-  if (customOptions) configureConnection(customOptions)
-
-  const connection = await fetchConnection()
-
-  const seeders = Array.isArray(entrySeeders) ? entrySeeders : [entrySeeders]
-  for (const seeder of seeders) {
-    await new seeder().run(connection)
-  }
+  // if (customOptions) configureConnection(customOptions)
+  // const connection = await fetchConnection()
+  // const seeders = Array.isArray(entrySeeders) ? entrySeeders : [entrySeeders]
+  // for (const seeder of seeders) {
+  //   await new seeder().run(connection)
+  // }
 }
diff --git a/test/factory.test.ts b/test/factory.test.ts
index 0cab214..9d68432 100644
--- a/test/factory.test.ts
+++ b/test/factory.test.ts
@@ -1,18 +1,17 @@
-import type { Connection } from 'typeorm'
-import { configureConnection, Factory, fetchConnection, Subfactory } from '../src'
+import { Factory, InstanceAttribute, LazyInstanceAttribute, Subfactory, useDataSource } from '../src'
+import { dataSource } from './fixtures/dataSource'
 import { Pet } from './fixtures/Pet.entity'
 import { PetFactory } from './fixtures/Pet.factory'
 import { User } from './fixtures/User.entity'
 import { UserFactory } from './fixtures/User.factory'
 
 describe(Factory, () => {
-  const userFactory = new UserFactory()
-  const petFactory = new PetFactory()
-
   describe(Factory.prototype.make, () => {
     describe(UserFactory, () => {
+      const factory = new UserFactory()
+
       test('Should make a new entity', async () => {
-        const userMaked = await userFactory.make()
+        const userMaked = await factory.make()
 
         expect(userMaked).toBeInstanceOf(User)
         expect(userMaked.id).toBeUndefined()
@@ -22,30 +21,82 @@ describe(Factory, () => {
         expect(userMaked.email).toBeDefined()
 
         expect(userMaked.pets).toBeInstanceOf(Array)
-        userMaked.pets.forEach((pet) => {
-          expect(pet).toBeInstanceOf(Pet)
+        expect(userMaked.pets).toHaveLength(0)
+      })
+
+      test('Should make a new entity with attribute overrided', async () => {
+        const userMaked = await factory.make({
+          name: 'john',
+        })
+
+        expect(userMaked.name).toBe('john')
+      })
+
+      test('Should make a new entity with function as attribute', async () => {
+        const userMaked = await factory.make({
+          name: () => 'john',
+        })
+
+        expect(userMaked.name).toBe('john')
+      })
+
+      test('Should make a new entity with async function as attribute', async () => {
+        const userMaked = await factory.make({
+          name: async () => 'john',
+        })
+
+        expect(userMaked.name).toBe('john')
+      })
+
+      test('Should make a new entity with instance attributes', async () => {
+        const userMaked = await factory.make({
+          email: new InstanceAttribute((instance) =>
+            [instance.name.toLowerCase(), instance.lastName.toLowerCase(), '@email.com'].join(''),
+          ),
+        })
+
+        expect(userMaked.email).toMatch(userMaked.name.toLowerCase())
+        expect(userMaked.email).toMatch(userMaked.lastName.toLowerCase())
+      })
+
+      test('Should make a new entity with lazy instance attributes', async () => {
+        const userMaked = await factory.make({
+          email: new InstanceAttribute((instance) =>
+            [instance.name.toLowerCase(), instance.lastName.toLowerCase(), '@email.com'].join(''),
+          ),
+        })
+
+        expect(userMaked.email).toMatch(userMaked.name.toLowerCase())
+        expect(userMaked.email).toMatch(userMaked.lastName.toLowerCase())
+      })
+
+      test('Should make a new entity with multiple subfactories', async () => {
+        const userMaked = await factory.make({
+          pets: new LazyInstanceAttribute((instance) => new Subfactory(PetFactory, { owner: instance }, 1)),
+        })
+
+        expect(userMaked.pets).toBeInstanceOf(Array)
+        expect(userMaked.pets).toHaveLength(1)
+        userMaked.pets.forEach(async (pet) => {
           expect(pet.id).toBeUndefined()
-          expect(pet.owner).toBeDefined()
           expect(pet.owner).toBeInstanceOf(User)
-          expect(pet.owner).toEqual(userMaked)
+          expect(pet.owner.id).toBeUndefined()
         })
       })
 
-      test('Should make a new entity with name overrided', async () => {
-        const providedName = 'john'
-        const userMaked = await userFactory.make({
-          name: providedName,
-        })
+      test('Should make two entities with different attributes', async () => {
+        const userMaked1 = await factory.make()
+        const userMaked2 = await factory.make()
 
-        expect(userMaked).toBeInstanceOf(User)
-        expect(userMaked.name).toBe(providedName)
-        expect(userMaked.email).toMatch(providedName)
+        expect(userMaked1).not.toStrictEqual(userMaked2)
       })
     })
 
     describe(PetFactory, () => {
-      test('Should make a new entity', async () => {
-        const petMaked = await petFactory.make()
+      const factory = new PetFactory()
+
+      test('Should make a new entity with single subfactory', async () => {
+        const petMaked = await factory.make()
 
         expect(petMaked).toBeInstanceOf(Pet)
         expect(petMaked.id).toBeUndefined()
@@ -54,25 +105,13 @@ describe(Factory, () => {
         expect(petMaked.owner).toBeInstanceOf(User)
         expect(petMaked.owner.id).toBeUndefined()
       })
-
-      test('Should make a new entity with name overrided', async () => {
-        const petName = 'Fido'
-        const petMaked = await petFactory.make({
-          name: petName,
-        })
-
-        expect(petMaked).toBeInstanceOf(Pet)
-        expect(petMaked.name).toBe(petName)
-      })
     })
   })
 
   describe(Factory.prototype.makeMany, () => {
-    test.each([
-      [UserFactory.name, userFactory],
-      [PetFactory.name, petFactory],
-    ])('Should make many new entities of %s', async (_, factory) => {
+    test('Should make many new entities', async () => {
       const count = 2
+      const factory = new UserFactory()
       const entitiesMaked = await factory.makeMany(count)
 
       expect(entitiesMaked).toHaveLength(count)
@@ -83,23 +122,19 @@ describe(Factory, () => {
   })
 
   describe(Factory.prototype.create, () => {
-    let connection: Connection
-
-    beforeEach(async () => {
-      configureConnection({ connection: 'memory' })
-      connection = await fetchConnection()
-
-      await connection.synchronize()
+    beforeAll(async () => {
+      await useDataSource(dataSource, { synchronize: true }, true)
     })
 
-    afterEach(async () => {
-      await connection.dropDatabase()
-      await connection.close()
+    afterAll(async () => {
+      await dataSource.destroy()
     })
 
     describe(UserFactory, () => {
+      const factory = new UserFactory()
+
       test('Should create a new entity', async () => {
-        const userCreated = await userFactory.create()
+        const userCreated = await factory.create()
 
         expect(userCreated).toBeInstanceOf(User)
         expect(userCreated.id).toBeDefined()
@@ -109,43 +144,83 @@ describe(Factory, () => {
         expect(userCreated.email).toBeDefined()
 
         expect(userCreated.pets).toBeInstanceOf(Array)
-        userCreated.pets.forEach((pet) => {
-          expect(pet).toBeInstanceOf(Pet)
-          expect(pet.id).toBeDefined()
-          expect(pet.owner).toBeDefined()
-          expect(pet.owner).toBeInstanceOf(User)
-          expect(pet.owner.id).toEqual(userCreated.id)
+        expect(userCreated.pets).toHaveLength(0)
+      })
+
+      test('Should create a new entity with attribute overrided', async () => {
+        const userCreated = await factory.create({
+          name: 'john',
+        })
+
+        expect(userCreated.name).toBe('john')
+      })
+
+      test('Should create a new entity with function as attribute', async () => {
+        const userCreated = await factory.create({
+          name: () => 'john',
         })
+
+        expect(userCreated.name).toBe('john')
       })
 
-      test('Should create a new entity with name overrided', async () => {
-        const providedName = 'john'
-        const userCreated = await userFactory.create({
-          name: providedName,
+      test('Should create a new entity with async function as attribute', async () => {
+        const userCreated = await factory.create({
+          name: async () => 'john',
         })
 
-        expect(userCreated).toBeInstanceOf(User)
-        expect(userCreated.name).toBe(providedName)
-        expect(userCreated.email).toMatch(providedName)
+        expect(userCreated.name).toBe('john')
+      })
+
+      test('Should create a new entity with instance attributes', async () => {
+        const userCreated = await factory.create({
+          email: new InstanceAttribute((instance) =>
+            [instance.name.toLowerCase(), instance.lastName.toLowerCase(), '@email.com'].join(''),
+          ),
+        })
+
+        expect(userCreated.email).toMatch(userCreated.name.toLowerCase())
+        expect(userCreated.email).toMatch(userCreated.lastName.toLowerCase())
       })
 
-      test('Should create a new entity with pets overrided', async () => {
-        const userCreated = await userFactory.create({
-          pets: new Subfactory(PetFactory, 5),
+      test('Should create a new entity with lazy instance attributes', async () => {
+        const userCreated = await factory.create({
+          email: new InstanceAttribute((instance) =>
+            [instance.name.toLowerCase(), instance.lastName.toLowerCase(), '@email.com'].join(''),
+          ),
+        })
+
+        expect(userCreated.email).toMatch(userCreated.name.toLowerCase())
+        expect(userCreated.email).toMatch(userCreated.lastName.toLowerCase())
+      })
+
+      test('Should create a new entity with multiple subfactories', async () => {
+        const userCreated = await factory.create({
+          pets: new LazyInstanceAttribute((instance) => new Subfactory(PetFactory, { owner: instance }, 1)),
         })
 
         expect(userCreated.pets).toBeInstanceOf(Array)
-        userCreated.pets.forEach((pet) => {
-          expect(pet).toBeInstanceOf(Pet)
+        expect(userCreated.pets).toHaveLength(1)
+        userCreated.pets.forEach(async (pet) => {
+          expect(pet.id).toBeDefined()
           expect(pet.owner).toBeInstanceOf(User)
-          expect(pet.owner.id).not.toEqual(userCreated.id)
+          expect(pet.owner.id).toBeDefined()
+          expect(pet.owner.id).toBe(userCreated.id)
         })
       })
+
+      test('Should create two entities with different attributes', async () => {
+        const userCreated1 = await factory.create()
+        const userCreated2 = await factory.create()
+
+        expect(userCreated1).not.toStrictEqual(userCreated2)
+      })
     })
 
     describe(PetFactory, () => {
-      test('Should create a new entity', async () => {
-        const petCreated = await petFactory.create()
+      const factory = new PetFactory()
+
+      test('Should create a new entity with single subfactory', async () => {
+        const petCreated = await factory.create()
 
         expect(petCreated).toBeInstanceOf(Pet)
         expect(petCreated.id).toBeDefined()
@@ -154,39 +229,21 @@ describe(Factory, () => {
         expect(petCreated.owner).toBeInstanceOf(User)
         expect(petCreated.owner.id).toBeDefined()
       })
-
-      test('Should create a new entity with name overrided and owner affected', async () => {
-        const petName = 'Fido'
-        const petCreated = await petFactory.create({
-          name: petName,
-        })
-
-        expect(petCreated).toBeInstanceOf(Pet)
-        expect(petCreated.name).toBe(petName)
-      })
     })
   })
 
   describe(Factory.prototype.createMany, () => {
-    let connection: Connection
-
-    beforeEach(async () => {
-      configureConnection({ connection: 'memory' })
-      connection = await fetchConnection()
-
-      await connection.synchronize()
+    beforeAll(async () => {
+      await useDataSource(dataSource, { synchronize: true }, true)
     })
 
-    afterEach(async () => {
-      await connection.dropDatabase()
-      await connection.close()
+    afterAll(async () => {
+      await dataSource.destroy()
     })
 
-    test.each([
-      [UserFactory.name, userFactory],
-      [PetFactory.name, petFactory],
-    ])('Should create many new entities of %s', async (_, factory) => {
+    test('Should create many new entities', async () => {
       const count = 2
+      const factory = new UserFactory()
       const entitiesCreated = await factory.createMany(count)
 
       expect(entitiesCreated).toHaveLength(count)
diff --git a/test/fixtures/Pet.factory.ts b/test/fixtures/Pet.factory.ts
index 6f9c9f2..f86a978 100644
--- a/test/fixtures/Pet.factory.ts
+++ b/test/fixtures/Pet.factory.ts
@@ -8,12 +8,10 @@ import { UserFactory } from './User.factory'
 
 export class PetFactory extends Factory<Pet> {
   protected entity = Pet
-  protected get attrs(): FactorizedAttrs<Pet> {
+  protected attrs(): FactorizedAttrs<Pet> {
     return {
       name: faker.animal.insect(),
-      owner: new LazyInstanceAttribute(
-        (instance) => new Subfactory(UserFactory, { name: faker.name.firstName(), pets: [instance] }),
-      ),
+      owner: new LazyInstanceAttribute((instance) => new Subfactory(UserFactory, { pets: [instance] })),
     }
   }
 }
diff --git a/test/fixtures/User.factory.ts b/test/fixtures/User.factory.ts
index 4c3b7e4..fe5f3bc 100644
--- a/test/fixtures/User.factory.ts
+++ b/test/fixtures/User.factory.ts
@@ -1,24 +1,18 @@
 import { faker } from '@faker-js/faker'
-import { LazyInstanceAttribute } from '../../src'
 import { Factory } from '../../src/factory'
-import { InstanceAttribute } from '../../src/instanceAttribute'
-import { Subfactory } from '../../src/subfactory'
 import type { FactorizedAttrs } from '../../src/types'
 import { User } from '../fixtures/User.entity'
-import { PetFactory } from './Pet.factory'
 
-// Factory: Use every factorized attribute to test all paths
 export class UserFactory extends Factory<User> {
   protected entity = User
-  protected get attrs(): FactorizedAttrs<User> {
+
+  protected attrs(): FactorizedAttrs<User> {
     return {
       name: faker.name.firstName(),
-      lastName: async () => faker.name.lastName(),
-      age: () => faker.datatype.number({ min: 18, max: 65 }),
-      email: new InstanceAttribute((instance) =>
-        [instance.name.toLowerCase(), instance.lastName.toLowerCase(), '@email.com'].join(''),
-      ),
-      pets: new LazyInstanceAttribute((instance) => new Subfactory(PetFactory, { owner: instance }, 5)),
+      lastName: faker.name.lastName(),
+      age: faker.datatype.number({ min: 18, max: 65 }),
+      email: faker.internet.email(),
+      pets: [],
     }
   }
 }
diff --git a/test/fixtures/dataSource.ts b/test/fixtures/dataSource.ts
new file mode 100644
index 0000000..e4ab1b7
--- /dev/null
+++ b/test/fixtures/dataSource.ts
@@ -0,0 +1,7 @@
+import { DataSource } from 'typeorm'
+
+export const dataSource = new DataSource({
+  type: 'sqlite',
+  database: ':memory:',
+  entities: ['test/fixtures/**/*.entity.ts'],
+})
diff --git a/test/helpers/useDataSource.spec.ts b/test/helpers/useDataSource.spec.ts
new file mode 100644
index 0000000..08d03bc
--- /dev/null
+++ b/test/helpers/useDataSource.spec.ts
@@ -0,0 +1,108 @@
+import { existsSync, unlinkSync } from 'node:fs'
+import { DataSource } from 'typeorm'
+import { useDataSource } from '../../src'
+import { fetchDataSource } from '../../src/datasource'
+import { dataSource } from '../fixtures/dataSource'
+
+describe(useDataSource, () => {
+  describe('With initialized data source', () => {
+    beforeAll(async () => {
+      await dataSource.initialize()
+    })
+
+    afterAll(async () => {
+      if (existsSync('test.sql')) {
+        unlinkSync('test.sql')
+      }
+
+      await dataSource.destroy()
+    })
+
+    test('Should fetch data source', async () => {
+      await useDataSource(dataSource)
+
+      const dataSourceFetched = fetchDataSource()
+
+      expect(dataSourceFetched).toBeInstanceOf(DataSource)
+      expect(dataSourceFetched.isInitialized).toBeTruthy()
+    })
+
+    test('Should fetch data source overriding options', async () => {
+      await useDataSource(dataSource, { database: 'test.sql' })
+
+      const dataSourceFetched = fetchDataSource()
+
+      expect(dataSourceFetched).toBeInstanceOf(DataSource)
+      expect(dataSourceFetched.isInitialized).toBeTruthy()
+      expect(dataSourceFetched.options).toMatchObject({
+        database: 'test.sql',
+      })
+    })
+
+    describe('With initialization flag', () => {
+      test('Should raise error with initialization flag', async () => {
+        await expect(useDataSource(dataSource, true)).rejects.toThrow(Error)
+      })
+
+      test('Should raise error with initialization flag and options override', async () => {
+        await expect(useDataSource(dataSource, { database: 'test.sql' }, true)).rejects.toThrow(Error)
+      })
+    })
+  })
+
+  describe('With non initialized data source', () => {
+    afterAll(async () => {
+      if (existsSync('test.sql')) {
+        unlinkSync('test.sql')
+      }
+    })
+
+    test('Should fetch data source', async () => {
+      await useDataSource(dataSource)
+
+      const dataSourceFetched = fetchDataSource()
+
+      expect(dataSourceFetched).toBeInstanceOf(DataSource)
+      expect(dataSourceFetched.isInitialized).toBeFalsy()
+    })
+
+    test('Should fetch data source overriding options', async () => {
+      await useDataSource(dataSource, { database: 'test.sql' })
+
+      const dataSourceFetched = fetchDataSource()
+
+      expect(dataSourceFetched).toBeInstanceOf(DataSource)
+      expect(dataSourceFetched.isInitialized).toBeFalsy()
+      expect(dataSourceFetched.options).toMatchObject({
+        database: 'test.sql',
+      })
+    })
+
+    describe('With initialization flag', () => {
+      afterEach(async () => {
+        await dataSource.destroy()
+      })
+
+      test('Should fetch data source initializing it', async () => {
+        await useDataSource(dataSource, true)
+
+        const dataSourceFetched = fetchDataSource()
+
+        expect(dataSourceFetched).toBeInstanceOf(DataSource)
+        expect(dataSourceFetched.isInitialized).toBeTruthy()
+      })
+
+      test('Should fetch data source overriding options and initializing it', async () => {
+        await useDataSource(dataSource, { database: 'test.sql' }, true)
+
+        const dataSourceFetched = fetchDataSource()
+
+        expect(dataSourceFetched).toBeInstanceOf(DataSource)
+        expect(dataSourceFetched.isInitialized).toBeTruthy()
+        expect(dataSourceFetched.options).toMatchObject({
+          database: 'test.sql',
+        })
+      })
+    })
+  })
+})
diff --git a/yarn.lock b/yarn.lock
index e80e521..edfecf5 100644
--- a/yarn.lock
+++ b/yarn.lock
@@ -1431,11 +1431,6 @@
   dependencies:
     "@types/yargs-parser" "*"
 
-"@types/zen-observable@0.8.3":
-  version "0.8.3"
-  resolved "https://registry.yarnpkg.com/@types/zen-observable/-/zen-observable-0.8.3.tgz#781d360c282436494b32fe7d9f7f8e64b3118aa3"
-  integrity sha512-fbF6oTd4sGGy0xjHPKAt+eS2CrxJ3+6gQ3FGcBoIJR2TLAyCkCyI8JqZNy+FeON0AhVgNJoUumVoZQjBFUqHkw==
-
 "@typescript-eslint/eslint-plugin@5.28.0":
   version "5.28.0"
   resolved "https://registry.yarnpkg.com/@typescript-eslint/eslint-plugin/-/eslint-plugin-5.28.0.tgz#6204ac33bdd05ab27c7f77960f1023951115d403"
@@ -2310,6 +2305,11 @@ crypto-random-string@^2.0.0:
   resolved "https://registry.yarnpkg.com/crypto-random-string/-/crypto-random-string-2.0.0.tgz#ef2a7a966ec11083388369baa02ebead229b30d5"
   integrity sha512-v1plID3y9r/lPhviJ1wrXpLeyUIGAZ2SHNYTEapm7/8A9nLPoyvVp3RK/EPFqn5kEznyWgYZNsRtYYIWbuG8KA==
 
+date-fns@^2.28.0:
+  version "2.28.0"
+  resolved "https://registry.yarnpkg.com/date-fns/-/date-fns-2.28.0.tgz#9570d656f5fc13143e50c975a3b6bbeb46cd08b2"
+  integrity sha512-8d35hViGYx/QH0icHYCeLmsLmMUheMmTyV9Fcm6gvNwdw31yXXH+O85sOBJ+OLnLQMKZowvpKb6FgMIQjcpvQw==
+
 dateformat@^3.0.0:
   version "3.0.3"
   resolved "https://registry.yarnpkg.com/dateformat/-/dateformat-3.0.3.tgz#a6e37499a4d9a9cf85ef5872044d62901c9889ae"
@@ -2490,10 +2490,10 @@ dot-prop@^3.0.0:
   dependencies:
     is-obj "^1.0.0"
 
-dotenv@^8.2.0:
-  version "8.6.0"
-  resolved "https://registry.yarnpkg.com/dotenv/-/dotenv-8.6.0.tgz#061af664d19f7f4d8fc6e4ff9b584ce237adcb8b"
-  integrity sha512-IrPdXQsk2BbzvCBGBOTmmSH5SodmqZNt4ERAZDmW4CT+tL8VtvinqywuANaFu4bOMWki16nqf0e4oC0QIaDr/g==
+dotenv@^16.0.0:
+  version "16.0.1"
+  resolved "https://registry.yarnpkg.com/dotenv/-/dotenv-16.0.1.tgz#8f8f9d94876c35dac989876a5d3a82a267fdce1d"
+  integrity sha512-1K6hR6wtk2FviQ4kEiSjFiH5rpzEVi8WW0x96aztHVMhEspNpc4DVOUTEHtEva5VThQ8IaBX1Pe4gSzpVVUsKQ==
 
 duplexer2@~0.1.0:
   version "0.1.4"
@@ -4074,7 +4074,7 @@ js-yaml@^3.13.1:
     argparse "^1.0.7"
     esprima "^4.0.0"
 
-js-yaml@^4.0.0, js-yaml@^4.1.0:
+js-yaml@^4.1.0:
   version "4.1.0"
   resolved "https://registry.yarnpkg.com/js-yaml/-/js-yaml-4.1.0.tgz#c1fb65f8f5017901cdd2c951864ba18458a10602"
   integrity sha512-wpxZs9NoxZaJESJGIZTyDEaYpl0FKSA+FB9aJiyemKhMwkxQg63h4T1KJgUGHpTqPDNRcmmYLugrRjJlBtWvRA==
@@ -6310,10 +6310,10 @@ tslib@^1.8.1:
   resolved "https://registry.yarnpkg.com/tslib/-/tslib-1.11.1.tgz#eb15d128827fbee2841549e171f45ed338ac7e35"
   integrity sha512-aZW88SY8kQbU7gpV19lN24LtXh/yD4ZZg6qieAJDDg+YBsJcSmLGK9QpnUjAKVG/xefmvJGd1WUmfpT/g6AJGA==
 
-tslib@^2.1.0:
-  version "2.3.1"
-  resolved "https://registry.yarnpkg.com/tslib/-/tslib-2.3.1.tgz#e8a335add5ceae51aa261d32a490158ef042ef01"
-  integrity sha512-77EbyPPpMz+FRFRuAFlWMtmgUWGe9UOG2Z25NqCwiIjRhOf5iKGuzSe5P2w1laq+FkRy4p+PCuVkJSGkzTEKVw==
+tslib@^2.3.1:
+  version "2.4.0"
+  resolved "https://registry.yarnpkg.com/tslib/-/tslib-2.4.0.tgz#7cecaa7f073ce680a05847aa77be941098f36dc3"
+  integrity sha512-d6xOpEDfsi2CZVlPQzGeux8XMwLT9hssAsaPYExaQMuYskwb+x1x7J371tWlbBdWHroy99KnVB6qIkUbs5X3UQ==
 
 tsutils@^3.21.0:
   version "3.21.0"
@@ -6369,28 +6369,28 @@ type-fest@^1.0.2:
   resolved "https://registry.yarnpkg.com/type-fest/-/type-fest-1.4.0.tgz#e9fb813fe3bf1744ec359d55d1affefa76f14be1"
   integrity sha512-yGSza74xk0UG8k+pLh5oeoYirvIiWo5t0/o3zHHAO2tRDiZcxWP7fywNlXhqb6/r6sWvwi+RsyQMWhVLe4BVuA==
 
-typeorm@0.2.45:
-  version "0.2.45"
-  resolved "https://registry.yarnpkg.com/typeorm/-/typeorm-0.2.45.tgz#e5bbb3af822dc4646bad96cfa48cd22fa4687cea"
-  integrity sha512-c0rCO8VMJ3ER7JQ73xfk0zDnVv0WDjpsP6Q1m6CVKul7DB9iVdWLRjPzc8v2eaeBuomsbZ2+gTaYr8k1gm3bYA==
+typeorm@0.3.6:
+  version "0.3.6"
+  resolved "https://registry.yarnpkg.com/typeorm/-/typeorm-0.3.6.tgz#65203443a1b684bb746785913fe2b0877aa991c0"
+  integrity sha512-DRqgfqcelMiGgWSMbBmVoJNFN2nPNA3EeY2gC324ndr2DZoGRTb9ILtp2oGVGnlA+cu5zgQ6it5oqKFNkte7Aw==
   dependencies:
     "@sqltools/formatter" "^1.2.2"
     app-root-path "^3.0.0"
     buffer "^6.0.3"
     chalk "^4.1.0"
     cli-highlight "^2.1.11"
-    debug "^4.3.1"
-    dotenv "^8.2.0"
-    glob "^7.1.6"
-    js-yaml "^4.0.0"
+    date-fns "^2.28.0"
+    debug "^4.3.3"
+    dotenv "^16.0.0"
+    glob "^7.2.0"
+    js-yaml "^4.1.0"
     mkdirp "^1.0.4"
     reflect-metadata "^0.1.13"
     sha.js "^2.4.11"
-    tslib "^2.1.0"
+    tslib "^2.3.1"
     uuid "^8.3.2"
     xml2js "^0.4.23"
-    yargs "^17.0.1"
-    zen-observable-ts "^1.0.0"
+    yargs "^17.3.1"
 
 typescript@4.7.3:
   version "4.7.3"
@@ -6662,19 +6662,6 @@ yargs@^16.0.0, yargs@^16.2.0:
     y18n "^5.0.5"
     yargs-parser "^20.2.2"
 
-yargs@^17.0.1:
-  version "17.2.1"
-  resolved "https://registry.yarnpkg.com/yargs/-/yargs-17.2.1.tgz#e2c95b9796a0e1f7f3bf4427863b42e0418191ea"
-  integrity sha512-XfR8du6ua4K6uLGm5S6fA+FIJom/MdJcFNVY8geLlp2v8GYbOXD4EB1tPNZsRn4vBzKGMgb5DRZMeWuFc2GO8Q==
-  dependencies:
-    cliui "^7.0.2"
-    escalade "^3.1.1"
-    get-caller-file "^2.0.5"
-    require-directory "^2.1.1"
-    string-width "^4.2.0"
-    y18n "^5.0.5"
-    yargs-parser "^20.2.2"
-
 yargs@^17.3.1:
   version "17.4.1"
   resolved "https://registry.yarnpkg.com/yargs/-/yargs-17.4.1.tgz#ebe23284207bb75cee7c408c33e722bfb27b5284"
@@ -6692,16 +6679,3 @@ yn@3.1.1:
   version "3.1.1"
   resolved "https://registry.yarnpkg.com/yn/-/yn-3.1.1.tgz#1e87401a09d767c1d5eab26a6e4c185182d2eb50"
   integrity sha512-Ux4ygGWsu2c7isFWe8Yu1YluJmqVhxqK2cLXNQA5AcC3QfbGNpM7fu0Y8b/z16pXLnFxZYvWhd3fhBY9DLmC6Q==
-
-zen-observable-ts@^1.0.0:
-  version "1.1.0"
-  resolved "https://registry.yarnpkg.com/zen-observable-ts/-/zen-observable-ts-1.1.0.tgz#2d1aa9d79b87058e9b75698b92791c1838551f83"
-  integrity sha512-1h4zlLSqI2cRLPJUHJFL8bCWHhkpuXkF+dbGkRaWjgDIG26DmzyshUMrdV/rL3UnR+mhaX4fRq8LPouq0MYYIA==
-  dependencies:
-    "@types/zen-observable" "0.8.3"
-    zen-observable "0.8.15"
-
-zen-observable@0.8.15:
-  version "0.8.15"
-  resolved "https://registry.yarnpkg.com/zen-observable/-/zen-observable-0.8.15.tgz#96415c512d8e3ffd920afd3889604e30b9eaac15"
-  integrity sha512-PQ2PC7R9rslx84ndNBZB/Dkv8V8fZEpk83RLgXtYd0fwUgEjseMn1Dgajh2x6S8QbZAFa9p2qVCEuYZNgve0dQ==
